openapi: 3.0.4
info:
  title: Swagger Gamer Challenges - OpenAPI 3.0
  description: |-
    Our project Gamer Challenges is a student project to join gamers around the world to challenge each other in games. 
    Users can post challenges, show game records, and compete.
  termsOfService: https://GamerChallenges.io/terms/
  contact:
    email: gamerChallenge@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:5000/api/

tags:
  - name: auth
    description: Authentication & user access
  - name: game
    description: Manage and fetch available games
  - name: logout
    description: Disconnect from application

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user by providing email, password, and other details.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Passwords do not match
        "409":
          description: Email already in use

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      description: Authenticate user and return access token as cookie.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Invalid credentials

  /auth/logout:
    post:
      tags:
        - logout
      summary: Logout user
      description: Clear the access token cookie.
      operationId: logoutUser
      responses:
        "204":
          description: Successfully logged out

  /auth/me:
    get:
      tags:
        - auth
      summary: Get current user
      description: Retrieve the currently authenticated user's profile.
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Current user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /auth/delete/{userId}:
    patch:
      tags:
        - auth
      summary: Soft delete user
      description: Soft deletes the user account by anonymizing user data.
      operationId: softDeleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User soft-deleted
        "403":
          description: Forbidden - user not authorized

  /games:
    get:
      tags:
        - game
      summary: Get all games
      description: Retrieve all games that can be selected when creating a challenge.
      operationId: getAllGames
      responses:
        "200":
          description: A list of games
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Game"
        "500":
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - pseudo
        - email
        - password
        - confirm
      properties:
        pseudo:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        confirm:
          type: string
          format: password

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: integer
        pseudo:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        updated_at:
          type: string
          format: date-time

    Game:
      type: object
      properties:
        game_id:
          type: integer
          example: 1
        title:
          type: string
          example: "League of Legends"
        image_url:
          type: string
          format: uri
          example: "https://www.example.com/lol.jpg"
