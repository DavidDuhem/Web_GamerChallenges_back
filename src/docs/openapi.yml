openapi: 3.0.4
info:
  title: Swagger Gamer Challenges - OpenAPI 3.0
  description: |-
    Our project Gamer Challenges is a student project to join gamers around the world to challenge each other in games. 
    Users can post challenges, show game records, and compete.
  termsOfService: https://GamerChallenges.io/terms/
  contact:
    email: gamerChallenge@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:5000/api/

tags:
  - name: auth
    description: Authentication & user access
  - name: game
    description: Manage and fetch available games
  - name: logout
    description: Disconnect from application
  - name: challenges
    description: Create and manage gaming challenges
  - name: entries
    description: Create and manage entries for challenges

paths:
  /entries:
    post:
      tags:
        - entries
      summary: Create a new entry
      description: Create a new challenge's entry with validation rules.
      operationId: createEntry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntryCreateRequest"
            example:
              title: "Best Killstreak"
              image_url: "https://cdn.example.com/entry-image.jpg"
              challenge_id: 1
              userId: 5
      responses:
        "201":
          description: Entry successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryCreateResponse"
        "400":
          description: Validation failed - invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Challenge not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /entries/{entryId}:
    patch:
      tags:
        - entries
      summary: Update an entry
      description: Updates an entry belonging to the authenticated user.
      operationId: updateEntry
      security:
        - bearerAuth: []
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntryUpdateRequest"
            example:
              title: "Updated Killstreak"
              video_url: "https://cdn.example.com/killstreak.mp4"
              challenge_id: 1
              user_id: 5
      responses:
        "200":
          description: Entry successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/EntryCreateResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Forbidden - user is not the owner of the entry
        "404":
          description: Entry not found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - entries
      summary: Delete an entry
      description: Deletes an entry belonging to the authenticated user.
      operationId: deleteEntry
      security:
        - bearerAuth: []
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the entry to delete
      responses:
        "200":
          description: Entry successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    description: Deleted entry object
                    example:
                      id: 42
                      title: "Killstreak"
                      user_id: 5
                      challenge_id: 1
                      created_at: "2025-09-30T12:00:00Z"
                      updated_at: "2025-09-30T12:10:00Z"
        "403":
          description: Forbidden - user is not the owner of the entry
        "404":
          description: Entry not found
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    EntryCreateRequest:
      type: object
      required:
        - title
        - image_url
        - challenge_id
        - userId
      properties:
        title:
          type: string
          description: Title of the entry
          example: "Best Killstreak"
        image_url:
          type: string
          format: uri
          description: URL of the entry's image
          example: "https://cdn.example.com/entry-image.jpg"
        challenge_id:
          type: integer
          description: ID of the challenge
          example: 1
        userId:
          type: integer
          description: ID of the user creating the entry
          example: 5
        created_at:
          type: string
          format: date-time
          description: Creation timestamp (auto-generated)
        updated_at:
          type: string
          format: date-time
          description: Update timestamp (auto-generated)

    EntryCreateResponse:
      type: object
      properties:
        entry:
          type: object
          properties:
            id:
              type: integer
              example: 42
            title:
              type: string
              example: "Best Killstreak"
            image_url:
              type: string
              format: uri
              example: "https://cdn.example.com/entry-image.jpg"
            challenge_id:
              type: integer
              example: 1
            user_id:
              type: integer
              example: 5
            created_at:
              type: string
              format: date-time
              example: "2025-09-30T12:34:56Z"
            updated_at:
              type: string
              format: date-time
              example: "2025-09-30T12:34:56Z"
    EntryUpdateRequest:
      type: object
      required:
        - title
        - video_url
        - challenge_id
        - user_id
      properties:
        title:
          type: string
          description: Updated title of the entry
          example: "Updated Killstreak"
        video_url:
          type: string
          format: uri
          description: URL of the gameplay video
          example: "https://cdn.example.com/killstreak.mp4"
        challenge_id:
          type: integer
          description: ID of the challenge the entry belongs to
          example: 1
        user_id:
          type: integer
          description: ID of the user (must match JWT)
          example: 5

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "Validation échouée"
        details:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: "too_small"
              path:
                type: array
                items:
                  type: string
                example: ["title"]
              message:
                type: string
                example: "Le titre doit contenir au moins 3 caractères"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Erreur serveur"
        details:
          type: string
          example: "Database connection failed"
